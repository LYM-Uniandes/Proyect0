Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    DIVIDE
    GT
    GTE
    LT
    LTE
    MINUS
    NE
    ODD
    PLUS
    SPACE
    TIMES
    UPDATE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROG
Rule 2     program -> PROG variable proc GORP
Rule 3     program -> PROG variable proc proc GORP
Rule 4     program -> PROG variable proc proc proc GORP
Rule 5     variable -> VAR ID COMMA ID COMMA ID SEMMICOLOM
Rule 6     variable -> ID ASSIGN NUMBER SEMMICOLOM
Rule 7     proc -> PROC ID LPARENT ID COMMA ID RPARENT statement proc
Rule 8     proc -> PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE
Rule 9     proc -> OPENCORCHETE proc variable proc CLOSECORCHETE
Rule 10    proc -> PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE
Rule 11    proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM
Rule 12    proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT
Rule 13    statement -> while
Rule 14    if -> IF condition OPENCORCHETE statement CLOSECORCHETE FI
Rule 15    while -> WHILE LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT DO do OD
Rule 16    condition -> LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT
Rule 17    do -> OPENCORCHETE ID LPARENT ID COMMA NUMBER RPARENT CLOSECORCHETE
Rule 18    statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE
Rule 19    statement -> ID LPARENT ID COMMA NUMBER RPARENT

Terminals, with rules where they appear

ASSIGN               : 6
BREAK                : 
CLOSECORCHETE        : 8 9 10 14 17 18
COMMA                : 5 5 7 11 12 15 16 17 19
DIVIDE               : 
DO                   : 15
FI                   : 14
GORP                 : 2 3 4
GT                   : 
GTE                  : 
ID                   : 5 5 5 6 7 7 7 8 10 11 12 15 15 16 16 17 17 18 18 18 18 18 18 19 19
IF                   : 14
LPARENT              : 7 8 10 11 12 15 15 16 16 17 18 18 18 19
LT                   : 
LTE                  : 
MINUS                : 
NE                   : 
NUMBER               : 6 11 11 12 12 15 16 17 19
OD                   : 15
ODD                  : 
OPENCORCHETE         : 8 9 10 14 17 18
PLUS                 : 
PROC                 : 7 8 10
PROG                 : 1 2 3 4
RPARENT              : 7 8 10 11 12 15 15 16 16 17 18 18 18 19
SEMMICOLOM           : 5 6 11 18 18
SPACE                : 
TIMES                : 
UPDATE               : 
VAR                  : 5
WHILE                : 15
error                : 

Nonterminals, with rules where they appear

condition            : 14
do                   : 15
if                   : 10
proc                 : 2 3 3 4 4 4 7 9 9
program              : 0
statement            : 7 8 14
variable             : 2 3 4 9
while                : 13

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROG
    (2) program -> . PROG variable proc GORP
    (3) program -> . PROG variable proc proc GORP
    (4) program -> . PROG variable proc proc proc GORP

    PROG            shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROG .
    (2) program -> PROG . variable proc GORP
    (3) program -> PROG . variable proc proc GORP
    (4) program -> PROG . variable proc proc proc GORP
    (5) variable -> . VAR ID COMMA ID COMMA ID SEMMICOLOM
    (6) variable -> . ID ASSIGN NUMBER SEMMICOLOM

    $end            reduce using rule 1 (program -> PROG .)
    VAR             shift and go to state 4
    ID              shift and go to state 5

    variable                       shift and go to state 3

state 3

    (2) program -> PROG variable . proc GORP
    (3) program -> PROG variable . proc proc GORP
    (4) program -> PROG variable . proc proc proc GORP
    (7) proc -> . PROC ID LPARENT ID COMMA ID RPARENT statement proc
    (8) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE
    (9) proc -> . OPENCORCHETE proc variable proc CLOSECORCHETE
    (10) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE
    (11) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM
    (12) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT

    PROC            shift and go to state 7
    OPENCORCHETE    shift and go to state 9
    ID              shift and go to state 8

    proc                           shift and go to state 6

state 4

    (5) variable -> VAR . ID COMMA ID COMMA ID SEMMICOLOM

    ID              shift and go to state 10


state 5

    (6) variable -> ID . ASSIGN NUMBER SEMMICOLOM

    ASSIGN          shift and go to state 11


state 6

    (2) program -> PROG variable proc . GORP
    (3) program -> PROG variable proc . proc GORP
    (4) program -> PROG variable proc . proc proc GORP
    (7) proc -> . PROC ID LPARENT ID COMMA ID RPARENT statement proc
    (8) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE
    (9) proc -> . OPENCORCHETE proc variable proc CLOSECORCHETE
    (10) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE
    (11) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM
    (12) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT

    GORP            shift and go to state 13
    PROC            shift and go to state 7
    OPENCORCHETE    shift and go to state 9
    ID              shift and go to state 8

    proc                           shift and go to state 12

state 7

    (7) proc -> PROC . ID LPARENT ID COMMA ID RPARENT statement proc
    (8) proc -> PROC . ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE
    (10) proc -> PROC . ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE

    ID              shift and go to state 14


state 8

    (11) proc -> ID . LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM
    (12) proc -> ID . LPARENT NUMBER COMMA NUMBER RPARENT

    LPARENT         shift and go to state 15


state 9

    (9) proc -> OPENCORCHETE . proc variable proc CLOSECORCHETE
    (7) proc -> . PROC ID LPARENT ID COMMA ID RPARENT statement proc
    (8) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE
    (9) proc -> . OPENCORCHETE proc variable proc CLOSECORCHETE
    (10) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE
    (11) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM
    (12) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT

    PROC            shift and go to state 7
    OPENCORCHETE    shift and go to state 9
    ID              shift and go to state 8

    proc                           shift and go to state 16

state 10

    (5) variable -> VAR ID . COMMA ID COMMA ID SEMMICOLOM

    COMMA           shift and go to state 17


state 11

    (6) variable -> ID ASSIGN . NUMBER SEMMICOLOM

    NUMBER          shift and go to state 18


state 12

    (3) program -> PROG variable proc proc . GORP
    (4) program -> PROG variable proc proc . proc GORP
    (7) proc -> . PROC ID LPARENT ID COMMA ID RPARENT statement proc
    (8) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE
    (9) proc -> . OPENCORCHETE proc variable proc CLOSECORCHETE
    (10) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE
    (11) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM
    (12) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT

    GORP            shift and go to state 20
    PROC            shift and go to state 7
    OPENCORCHETE    shift and go to state 9
    ID              shift and go to state 8

    proc                           shift and go to state 19

state 13

    (2) program -> PROG variable proc GORP .

    $end            reduce using rule 2 (program -> PROG variable proc GORP .)


state 14

    (7) proc -> PROC ID . LPARENT ID COMMA ID RPARENT statement proc
    (8) proc -> PROC ID . LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE
    (10) proc -> PROC ID . LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE

    LPARENT         shift and go to state 21


state 15

    (11) proc -> ID LPARENT . NUMBER COMMA NUMBER RPARENT SEMMICOLOM
    (12) proc -> ID LPARENT . NUMBER COMMA NUMBER RPARENT

    NUMBER          shift and go to state 22


state 16

    (9) proc -> OPENCORCHETE proc . variable proc CLOSECORCHETE
    (5) variable -> . VAR ID COMMA ID COMMA ID SEMMICOLOM
    (6) variable -> . ID ASSIGN NUMBER SEMMICOLOM

    VAR             shift and go to state 4
    ID              shift and go to state 5

    variable                       shift and go to state 23

state 17

    (5) variable -> VAR ID COMMA . ID COMMA ID SEMMICOLOM

    ID              shift and go to state 24


state 18

    (6) variable -> ID ASSIGN NUMBER . SEMMICOLOM

    SEMMICOLOM      shift and go to state 25


state 19

    (4) program -> PROG variable proc proc proc . GORP

    GORP            shift and go to state 26


state 20

    (3) program -> PROG variable proc proc GORP .

    $end            reduce using rule 3 (program -> PROG variable proc proc GORP .)


state 21

    (7) proc -> PROC ID LPARENT . ID COMMA ID RPARENT statement proc
    (8) proc -> PROC ID LPARENT . RPARENT OPENCORCHETE statement CLOSECORCHETE
    (10) proc -> PROC ID LPARENT . RPARENT OPENCORCHETE if CLOSECORCHETE

    ID              shift and go to state 27
    RPARENT         shift and go to state 28


state 22

    (11) proc -> ID LPARENT NUMBER . COMMA NUMBER RPARENT SEMMICOLOM
    (12) proc -> ID LPARENT NUMBER . COMMA NUMBER RPARENT

    COMMA           shift and go to state 29


state 23

    (9) proc -> OPENCORCHETE proc variable . proc CLOSECORCHETE
    (7) proc -> . PROC ID LPARENT ID COMMA ID RPARENT statement proc
    (8) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE
    (9) proc -> . OPENCORCHETE proc variable proc CLOSECORCHETE
    (10) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE
    (11) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM
    (12) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT

    PROC            shift and go to state 7
    OPENCORCHETE    shift and go to state 9
    ID              shift and go to state 8

    proc                           shift and go to state 30

state 24

    (5) variable -> VAR ID COMMA ID . COMMA ID SEMMICOLOM

    COMMA           shift and go to state 31


state 25

    (6) variable -> ID ASSIGN NUMBER SEMMICOLOM .

    PROC            reduce using rule 6 (variable -> ID ASSIGN NUMBER SEMMICOLOM .)
    OPENCORCHETE    reduce using rule 6 (variable -> ID ASSIGN NUMBER SEMMICOLOM .)
    ID              reduce using rule 6 (variable -> ID ASSIGN NUMBER SEMMICOLOM .)


state 26

    (4) program -> PROG variable proc proc proc GORP .

    $end            reduce using rule 4 (program -> PROG variable proc proc proc GORP .)


state 27

    (7) proc -> PROC ID LPARENT ID . COMMA ID RPARENT statement proc

    COMMA           shift and go to state 32


state 28

    (8) proc -> PROC ID LPARENT RPARENT . OPENCORCHETE statement CLOSECORCHETE
    (10) proc -> PROC ID LPARENT RPARENT . OPENCORCHETE if CLOSECORCHETE

    OPENCORCHETE    shift and go to state 33


state 29

    (11) proc -> ID LPARENT NUMBER COMMA . NUMBER RPARENT SEMMICOLOM
    (12) proc -> ID LPARENT NUMBER COMMA . NUMBER RPARENT

    NUMBER          shift and go to state 34


state 30

    (9) proc -> OPENCORCHETE proc variable proc . CLOSECORCHETE

    CLOSECORCHETE   shift and go to state 35


state 31

    (5) variable -> VAR ID COMMA ID COMMA . ID SEMMICOLOM

    ID              shift and go to state 36


state 32

    (7) proc -> PROC ID LPARENT ID COMMA . ID RPARENT statement proc

    ID              shift and go to state 37


state 33

    (8) proc -> PROC ID LPARENT RPARENT OPENCORCHETE . statement CLOSECORCHETE
    (10) proc -> PROC ID LPARENT RPARENT OPENCORCHETE . if CLOSECORCHETE
    (13) statement -> . while
    (18) statement -> . OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE
    (19) statement -> . ID LPARENT ID COMMA NUMBER RPARENT
    (14) if -> . IF condition OPENCORCHETE statement CLOSECORCHETE FI
    (15) while -> . WHILE LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT DO do OD

    OPENCORCHETE    shift and go to state 39
    ID              shift and go to state 38
    IF              shift and go to state 43
    WHILE           shift and go to state 44

    statement                      shift and go to state 40
    if                             shift and go to state 41
    while                          shift and go to state 42

state 34

    (11) proc -> ID LPARENT NUMBER COMMA NUMBER . RPARENT SEMMICOLOM
    (12) proc -> ID LPARENT NUMBER COMMA NUMBER . RPARENT

    RPARENT         shift and go to state 45


state 35

    (9) proc -> OPENCORCHETE proc variable proc CLOSECORCHETE .

    GORP            reduce using rule 9 (proc -> OPENCORCHETE proc variable proc CLOSECORCHETE .)
    PROC            reduce using rule 9 (proc -> OPENCORCHETE proc variable proc CLOSECORCHETE .)
    OPENCORCHETE    reduce using rule 9 (proc -> OPENCORCHETE proc variable proc CLOSECORCHETE .)
    ID              reduce using rule 9 (proc -> OPENCORCHETE proc variable proc CLOSECORCHETE .)
    VAR             reduce using rule 9 (proc -> OPENCORCHETE proc variable proc CLOSECORCHETE .)
    CLOSECORCHETE   reduce using rule 9 (proc -> OPENCORCHETE proc variable proc CLOSECORCHETE .)


state 36

    (5) variable -> VAR ID COMMA ID COMMA ID . SEMMICOLOM

    SEMMICOLOM      shift and go to state 46


state 37

    (7) proc -> PROC ID LPARENT ID COMMA ID . RPARENT statement proc

    RPARENT         shift and go to state 47


state 38

    (19) statement -> ID . LPARENT ID COMMA NUMBER RPARENT

    LPARENT         shift and go to state 48


state 39

    (18) statement -> OPENCORCHETE . ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE

    ID              shift and go to state 49


state 40

    (8) proc -> PROC ID LPARENT RPARENT OPENCORCHETE statement . CLOSECORCHETE

    CLOSECORCHETE   shift and go to state 50


state 41

    (10) proc -> PROC ID LPARENT RPARENT OPENCORCHETE if . CLOSECORCHETE

    CLOSECORCHETE   shift and go to state 51


state 42

    (13) statement -> while .

    CLOSECORCHETE   reduce using rule 13 (statement -> while .)
    PROC            reduce using rule 13 (statement -> while .)
    OPENCORCHETE    reduce using rule 13 (statement -> while .)
    ID              reduce using rule 13 (statement -> while .)


state 43

    (14) if -> IF . condition OPENCORCHETE statement CLOSECORCHETE FI
    (16) condition -> . LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT

    LPARENT         shift and go to state 53

    condition                      shift and go to state 52

state 44

    (15) while -> WHILE . LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT DO do OD

    LPARENT         shift and go to state 54


state 45

    (11) proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT . SEMMICOLOM
    (12) proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT .

    SEMMICOLOM      shift and go to state 55
    GORP            reduce using rule 12 (proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT .)
    PROC            reduce using rule 12 (proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT .)
    OPENCORCHETE    reduce using rule 12 (proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT .)
    ID              reduce using rule 12 (proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT .)
    VAR             reduce using rule 12 (proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT .)
    CLOSECORCHETE   reduce using rule 12 (proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT .)


state 46

    (5) variable -> VAR ID COMMA ID COMMA ID SEMMICOLOM .

    PROC            reduce using rule 5 (variable -> VAR ID COMMA ID COMMA ID SEMMICOLOM .)
    OPENCORCHETE    reduce using rule 5 (variable -> VAR ID COMMA ID COMMA ID SEMMICOLOM .)
    ID              reduce using rule 5 (variable -> VAR ID COMMA ID COMMA ID SEMMICOLOM .)


state 47

    (7) proc -> PROC ID LPARENT ID COMMA ID RPARENT . statement proc
    (13) statement -> . while
    (18) statement -> . OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE
    (19) statement -> . ID LPARENT ID COMMA NUMBER RPARENT
    (15) while -> . WHILE LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT DO do OD

    OPENCORCHETE    shift and go to state 39
    ID              shift and go to state 38
    WHILE           shift and go to state 44

    statement                      shift and go to state 56
    while                          shift and go to state 42

state 48

    (19) statement -> ID LPARENT . ID COMMA NUMBER RPARENT

    ID              shift and go to state 57


state 49

    (18) statement -> OPENCORCHETE ID . LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE

    LPARENT         shift and go to state 58


state 50

    (8) proc -> PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE .

    GORP            reduce using rule 8 (proc -> PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE .)
    PROC            reduce using rule 8 (proc -> PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE .)
    OPENCORCHETE    reduce using rule 8 (proc -> PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE .)
    ID              reduce using rule 8 (proc -> PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE .)
    VAR             reduce using rule 8 (proc -> PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE .)
    CLOSECORCHETE   reduce using rule 8 (proc -> PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE .)


state 51

    (10) proc -> PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE .

    GORP            reduce using rule 10 (proc -> PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE .)
    PROC            reduce using rule 10 (proc -> PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE .)
    OPENCORCHETE    reduce using rule 10 (proc -> PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE .)
    ID              reduce using rule 10 (proc -> PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE .)
    VAR             reduce using rule 10 (proc -> PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE .)
    CLOSECORCHETE   reduce using rule 10 (proc -> PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE .)


state 52

    (14) if -> IF condition . OPENCORCHETE statement CLOSECORCHETE FI

    OPENCORCHETE    shift and go to state 59


state 53

    (16) condition -> LPARENT . ID LPARENT ID COMMA NUMBER RPARENT RPARENT

    ID              shift and go to state 60


state 54

    (15) while -> WHILE LPARENT . ID LPARENT ID COMMA NUMBER RPARENT RPARENT DO do OD

    ID              shift and go to state 61


state 55

    (11) proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM .

    GORP            reduce using rule 11 (proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM .)
    PROC            reduce using rule 11 (proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM .)
    OPENCORCHETE    reduce using rule 11 (proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM .)
    ID              reduce using rule 11 (proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM .)
    VAR             reduce using rule 11 (proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM .)
    CLOSECORCHETE   reduce using rule 11 (proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM .)


state 56

    (7) proc -> PROC ID LPARENT ID COMMA ID RPARENT statement . proc
    (7) proc -> . PROC ID LPARENT ID COMMA ID RPARENT statement proc
    (8) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE
    (9) proc -> . OPENCORCHETE proc variable proc CLOSECORCHETE
    (10) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE
    (11) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM
    (12) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT

    PROC            shift and go to state 7
    OPENCORCHETE    shift and go to state 9
    ID              shift and go to state 8

    proc                           shift and go to state 62

state 57

    (19) statement -> ID LPARENT ID . COMMA NUMBER RPARENT

    COMMA           shift and go to state 63


state 58

    (18) statement -> OPENCORCHETE ID LPARENT . ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE

    ID              shift and go to state 64


state 59

    (14) if -> IF condition OPENCORCHETE . statement CLOSECORCHETE FI
    (13) statement -> . while
    (18) statement -> . OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE
    (19) statement -> . ID LPARENT ID COMMA NUMBER RPARENT
    (15) while -> . WHILE LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT DO do OD

    OPENCORCHETE    shift and go to state 39
    ID              shift and go to state 38
    WHILE           shift and go to state 44

    statement                      shift and go to state 65
    while                          shift and go to state 42

state 60

    (16) condition -> LPARENT ID . LPARENT ID COMMA NUMBER RPARENT RPARENT

    LPARENT         shift and go to state 66


state 61

    (15) while -> WHILE LPARENT ID . LPARENT ID COMMA NUMBER RPARENT RPARENT DO do OD

    LPARENT         shift and go to state 67


state 62

    (7) proc -> PROC ID LPARENT ID COMMA ID RPARENT statement proc .

    GORP            reduce using rule 7 (proc -> PROC ID LPARENT ID COMMA ID RPARENT statement proc .)
    PROC            reduce using rule 7 (proc -> PROC ID LPARENT ID COMMA ID RPARENT statement proc .)
    OPENCORCHETE    reduce using rule 7 (proc -> PROC ID LPARENT ID COMMA ID RPARENT statement proc .)
    ID              reduce using rule 7 (proc -> PROC ID LPARENT ID COMMA ID RPARENT statement proc .)
    VAR             reduce using rule 7 (proc -> PROC ID LPARENT ID COMMA ID RPARENT statement proc .)
    CLOSECORCHETE   reduce using rule 7 (proc -> PROC ID LPARENT ID COMMA ID RPARENT statement proc .)


state 63

    (19) statement -> ID LPARENT ID COMMA . NUMBER RPARENT

    NUMBER          shift and go to state 68


state 64

    (18) statement -> OPENCORCHETE ID LPARENT ID . RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE

    RPARENT         shift and go to state 69


state 65

    (14) if -> IF condition OPENCORCHETE statement . CLOSECORCHETE FI

    CLOSECORCHETE   shift and go to state 70


state 66

    (16) condition -> LPARENT ID LPARENT . ID COMMA NUMBER RPARENT RPARENT

    ID              shift and go to state 71


state 67

    (15) while -> WHILE LPARENT ID LPARENT . ID COMMA NUMBER RPARENT RPARENT DO do OD

    ID              shift and go to state 72


state 68

    (19) statement -> ID LPARENT ID COMMA NUMBER . RPARENT

    RPARENT         shift and go to state 73


state 69

    (18) statement -> OPENCORCHETE ID LPARENT ID RPARENT . SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE

    SEMMICOLOM      shift and go to state 74


state 70

    (14) if -> IF condition OPENCORCHETE statement CLOSECORCHETE . FI

    FI              shift and go to state 75


state 71

    (16) condition -> LPARENT ID LPARENT ID . COMMA NUMBER RPARENT RPARENT

    COMMA           shift and go to state 76


state 72

    (15) while -> WHILE LPARENT ID LPARENT ID . COMMA NUMBER RPARENT RPARENT DO do OD

    COMMA           shift and go to state 77


state 73

    (19) statement -> ID LPARENT ID COMMA NUMBER RPARENT .

    CLOSECORCHETE   reduce using rule 19 (statement -> ID LPARENT ID COMMA NUMBER RPARENT .)
    PROC            reduce using rule 19 (statement -> ID LPARENT ID COMMA NUMBER RPARENT .)
    OPENCORCHETE    reduce using rule 19 (statement -> ID LPARENT ID COMMA NUMBER RPARENT .)
    ID              reduce using rule 19 (statement -> ID LPARENT ID COMMA NUMBER RPARENT .)


state 74

    (18) statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM . ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE

    ID              shift and go to state 78


state 75

    (14) if -> IF condition OPENCORCHETE statement CLOSECORCHETE FI .

    CLOSECORCHETE   reduce using rule 14 (if -> IF condition OPENCORCHETE statement CLOSECORCHETE FI .)


state 76

    (16) condition -> LPARENT ID LPARENT ID COMMA . NUMBER RPARENT RPARENT

    NUMBER          shift and go to state 79


state 77

    (15) while -> WHILE LPARENT ID LPARENT ID COMMA . NUMBER RPARENT RPARENT DO do OD

    NUMBER          shift and go to state 80


state 78

    (18) statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID . LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE

    LPARENT         shift and go to state 81


state 79

    (16) condition -> LPARENT ID LPARENT ID COMMA NUMBER . RPARENT RPARENT

    RPARENT         shift and go to state 82


state 80

    (15) while -> WHILE LPARENT ID LPARENT ID COMMA NUMBER . RPARENT RPARENT DO do OD

    RPARENT         shift and go to state 83


state 81

    (18) statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT . ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE

    ID              shift and go to state 84


state 82

    (16) condition -> LPARENT ID LPARENT ID COMMA NUMBER RPARENT . RPARENT

    RPARENT         shift and go to state 85


state 83

    (15) while -> WHILE LPARENT ID LPARENT ID COMMA NUMBER RPARENT . RPARENT DO do OD

    RPARENT         shift and go to state 86


state 84

    (18) statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID . RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE

    RPARENT         shift and go to state 87


state 85

    (16) condition -> LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT .

    OPENCORCHETE    reduce using rule 16 (condition -> LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT .)


state 86

    (15) while -> WHILE LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT . DO do OD

    DO              shift and go to state 88


state 87

    (18) statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT . SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE

    SEMMICOLOM      shift and go to state 89


state 88

    (15) while -> WHILE LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT DO . do OD
    (17) do -> . OPENCORCHETE ID LPARENT ID COMMA NUMBER RPARENT CLOSECORCHETE

    OPENCORCHETE    shift and go to state 91

    do                             shift and go to state 90

state 89

    (18) statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM . ID LPARENT ID RPARENT CLOSECORCHETE

    ID              shift and go to state 92


state 90

    (15) while -> WHILE LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT DO do . OD

    OD              shift and go to state 93


state 91

    (17) do -> OPENCORCHETE . ID LPARENT ID COMMA NUMBER RPARENT CLOSECORCHETE

    ID              shift and go to state 94


state 92

    (18) statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID . LPARENT ID RPARENT CLOSECORCHETE

    LPARENT         shift and go to state 95


state 93

    (15) while -> WHILE LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT DO do OD .

    CLOSECORCHETE   reduce using rule 15 (while -> WHILE LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT DO do OD .)
    PROC            reduce using rule 15 (while -> WHILE LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT DO do OD .)
    OPENCORCHETE    reduce using rule 15 (while -> WHILE LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT DO do OD .)
    ID              reduce using rule 15 (while -> WHILE LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT DO do OD .)


state 94

    (17) do -> OPENCORCHETE ID . LPARENT ID COMMA NUMBER RPARENT CLOSECORCHETE

    LPARENT         shift and go to state 96


state 95

    (18) statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT . ID RPARENT CLOSECORCHETE

    ID              shift and go to state 97


state 96

    (17) do -> OPENCORCHETE ID LPARENT . ID COMMA NUMBER RPARENT CLOSECORCHETE

    ID              shift and go to state 98


state 97

    (18) statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID . RPARENT CLOSECORCHETE

    RPARENT         shift and go to state 99


state 98

    (17) do -> OPENCORCHETE ID LPARENT ID . COMMA NUMBER RPARENT CLOSECORCHETE

    COMMA           shift and go to state 100


state 99

    (18) statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT . CLOSECORCHETE

    CLOSECORCHETE   shift and go to state 101


state 100

    (17) do -> OPENCORCHETE ID LPARENT ID COMMA . NUMBER RPARENT CLOSECORCHETE

    NUMBER          shift and go to state 102


state 101

    (18) statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE .

    CLOSECORCHETE   reduce using rule 18 (statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE .)
    PROC            reduce using rule 18 (statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE .)
    OPENCORCHETE    reduce using rule 18 (statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE .)
    ID              reduce using rule 18 (statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE .)


state 102

    (17) do -> OPENCORCHETE ID LPARENT ID COMMA NUMBER . RPARENT CLOSECORCHETE

    RPARENT         shift and go to state 103


state 103

    (17) do -> OPENCORCHETE ID LPARENT ID COMMA NUMBER RPARENT . CLOSECORCHETE

    CLOSECORCHETE   shift and go to state 104


state 104

    (17) do -> OPENCORCHETE ID LPARENT ID COMMA NUMBER RPARENT CLOSECORCHETE .

    OD              reduce using rule 17 (do -> OPENCORCHETE ID LPARENT ID COMMA NUMBER RPARENT CLOSECORCHETE .)

