Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    DIVIDE
    GT
    GTE
    LT
    LTE
    MINUS
    NE
    ODD
    PLUS
    SPACE
    TIMES
    UPDATE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROG
Rule 2     program -> PROG variable proc GORP
Rule 3     proc -> proc proc
Rule 4     variable -> VAR variable
Rule 5     variable -> ID COMMA
Rule 6     variable -> ID SEMMICOLOM
Rule 7     variable -> variable variable
Rule 8     variable -> ID ASSIGN NUMBER SEMMICOLOM
Rule 9     proc -> PROC ID arguments statement proc
Rule 10    arguments -> LPARENT arguments RPARENT
Rule 11    arguments -> arguments arguments
Rule 12    arguments -> ID COMMA
Rule 13    arguments -> ID
Rule 14    proc -> PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE
Rule 15    proc -> OPENCORCHETE proc variable proc CLOSECORCHETE
Rule 16    proc -> PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE
Rule 17    proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM
Rule 18    proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT
Rule 19    statement -> while
Rule 20    if -> IF condition OPENCORCHETE statement CLOSECORCHETE FI
Rule 21    while -> WHILE LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT DO do OD
Rule 22    condition -> LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT
Rule 23    do -> OPENCORCHETE ID LPARENT ID COMMA NUMBER RPARENT CLOSECORCHETE
Rule 24    statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE
Rule 25    statement -> ID LPARENT ID COMMA NUMBER RPARENT

Terminals, with rules where they appear

ASSIGN               : 8
BREAK                : 
CLOSECORCHETE        : 14 15 16 20 23 24
COMMA                : 5 12 17 18 21 22 23 25
DIVIDE               : 
DO                   : 21
FI                   : 20
GORP                 : 2
GT                   : 
GTE                  : 
ID                   : 5 6 8 9 12 13 14 16 17 18 21 21 22 22 23 23 24 24 24 24 24 24 25 25
IF                   : 20
LPARENT              : 10 14 16 17 18 21 21 22 22 23 24 24 24 25
LT                   : 
LTE                  : 
MINUS                : 
NE                   : 
NUMBER               : 8 17 17 18 18 21 22 23 25
OD                   : 21
ODD                  : 
OPENCORCHETE         : 14 15 16 20 23 24
PLUS                 : 
PROC                 : 9 14 16
PROG                 : 1 2
RPARENT              : 10 14 16 17 18 21 21 22 22 23 24 24 24 25
SEMMICOLOM           : 6 8 17 24 24
SPACE                : 
TIMES                : 
UPDATE               : 
VAR                  : 4
WHILE                : 21
error                : 

Nonterminals, with rules where they appear

arguments            : 9 10 11 11
condition            : 20
do                   : 21
if                   : 16
proc                 : 2 3 3 9 15 15
program              : 0
statement            : 9 14 20
variable             : 2 4 7 7 15
while                : 19

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROG
    (2) program -> . PROG variable proc GORP

    PROG            shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROG .
    (2) program -> PROG . variable proc GORP
    (4) variable -> . VAR variable
    (5) variable -> . ID COMMA
    (6) variable -> . ID SEMMICOLOM
    (7) variable -> . variable variable
    (8) variable -> . ID ASSIGN NUMBER SEMMICOLOM

    $end            reduce using rule 1 (program -> PROG .)
    VAR             shift and go to state 4
    ID              shift and go to state 5

    variable                       shift and go to state 3

state 3

    (2) program -> PROG variable . proc GORP
    (7) variable -> variable . variable
    (3) proc -> . proc proc
    (9) proc -> . PROC ID arguments statement proc
    (14) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE
    (15) proc -> . OPENCORCHETE proc variable proc CLOSECORCHETE
    (16) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE
    (17) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM
    (18) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT
    (4) variable -> . VAR variable
    (5) variable -> . ID COMMA
    (6) variable -> . ID SEMMICOLOM
    (7) variable -> . variable variable
    (8) variable -> . ID ASSIGN NUMBER SEMMICOLOM

    PROC            shift and go to state 8
    OPENCORCHETE    shift and go to state 10
    ID              shift and go to state 9
    VAR             shift and go to state 4

    variable                       shift and go to state 6
    proc                           shift and go to state 7

state 4

    (4) variable -> VAR . variable
    (4) variable -> . VAR variable
    (5) variable -> . ID COMMA
    (6) variable -> . ID SEMMICOLOM
    (7) variable -> . variable variable
    (8) variable -> . ID ASSIGN NUMBER SEMMICOLOM

    VAR             shift and go to state 4
    ID              shift and go to state 5

    variable                       shift and go to state 11

state 5

    (5) variable -> ID . COMMA
    (6) variable -> ID . SEMMICOLOM
    (8) variable -> ID . ASSIGN NUMBER SEMMICOLOM

    COMMA           shift and go to state 12
    SEMMICOLOM      shift and go to state 13
    ASSIGN          shift and go to state 14


state 6

    (7) variable -> variable variable .
    (7) variable -> variable . variable
    (4) variable -> . VAR variable
    (5) variable -> . ID COMMA
    (6) variable -> . ID SEMMICOLOM
    (7) variable -> . variable variable
    (8) variable -> . ID ASSIGN NUMBER SEMMICOLOM

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    PROC            reduce using rule 7 (variable -> variable variable .)
    OPENCORCHETE    reduce using rule 7 (variable -> variable variable .)
    VAR             shift and go to state 4
    ID              shift and go to state 5

  ! ID              [ reduce using rule 7 (variable -> variable variable .) ]
  ! VAR             [ reduce using rule 7 (variable -> variable variable .) ]

    variable                       shift and go to state 6

state 7

    (2) program -> PROG variable proc . GORP
    (3) proc -> proc . proc
    (3) proc -> . proc proc
    (9) proc -> . PROC ID arguments statement proc
    (14) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE
    (15) proc -> . OPENCORCHETE proc variable proc CLOSECORCHETE
    (16) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE
    (17) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM
    (18) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT

    GORP            shift and go to state 16
    PROC            shift and go to state 8
    OPENCORCHETE    shift and go to state 10
    ID              shift and go to state 17

    proc                           shift and go to state 15

state 8

    (9) proc -> PROC . ID arguments statement proc
    (14) proc -> PROC . ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE
    (16) proc -> PROC . ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE

    ID              shift and go to state 18


state 9

    (17) proc -> ID . LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM
    (18) proc -> ID . LPARENT NUMBER COMMA NUMBER RPARENT
    (5) variable -> ID . COMMA
    (6) variable -> ID . SEMMICOLOM
    (8) variable -> ID . ASSIGN NUMBER SEMMICOLOM

    LPARENT         shift and go to state 19
    COMMA           shift and go to state 12
    SEMMICOLOM      shift and go to state 13
    ASSIGN          shift and go to state 14


state 10

    (15) proc -> OPENCORCHETE . proc variable proc CLOSECORCHETE
    (3) proc -> . proc proc
    (9) proc -> . PROC ID arguments statement proc
    (14) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE
    (15) proc -> . OPENCORCHETE proc variable proc CLOSECORCHETE
    (16) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE
    (17) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM
    (18) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT

    PROC            shift and go to state 8
    OPENCORCHETE    shift and go to state 10
    ID              shift and go to state 17

    proc                           shift and go to state 20

state 11

    (4) variable -> VAR variable .
    (7) variable -> variable . variable
    (4) variable -> . VAR variable
    (5) variable -> . ID COMMA
    (6) variable -> . ID SEMMICOLOM
    (7) variable -> . variable variable
    (8) variable -> . ID ASSIGN NUMBER SEMMICOLOM

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    PROC            reduce using rule 4 (variable -> VAR variable .)
    OPENCORCHETE    reduce using rule 4 (variable -> VAR variable .)
    VAR             shift and go to state 4
    ID              shift and go to state 5

  ! ID              [ reduce using rule 4 (variable -> VAR variable .) ]
  ! VAR             [ reduce using rule 4 (variable -> VAR variable .) ]

    variable                       shift and go to state 6

state 12

    (5) variable -> ID COMMA .

    PROC            reduce using rule 5 (variable -> ID COMMA .)
    OPENCORCHETE    reduce using rule 5 (variable -> ID COMMA .)
    ID              reduce using rule 5 (variable -> ID COMMA .)
    VAR             reduce using rule 5 (variable -> ID COMMA .)


state 13

    (6) variable -> ID SEMMICOLOM .

    PROC            reduce using rule 6 (variable -> ID SEMMICOLOM .)
    OPENCORCHETE    reduce using rule 6 (variable -> ID SEMMICOLOM .)
    ID              reduce using rule 6 (variable -> ID SEMMICOLOM .)
    VAR             reduce using rule 6 (variable -> ID SEMMICOLOM .)


state 14

    (8) variable -> ID ASSIGN . NUMBER SEMMICOLOM

    NUMBER          shift and go to state 21


state 15

    (3) proc -> proc proc .
    (3) proc -> proc . proc
    (3) proc -> . proc proc
    (9) proc -> . PROC ID arguments statement proc
    (14) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE
    (15) proc -> . OPENCORCHETE proc variable proc CLOSECORCHETE
    (16) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE
    (17) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM
    (18) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT

  ! shift/reduce conflict for PROC resolved as shift
  ! shift/reduce conflict for OPENCORCHETE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    GORP            reduce using rule 3 (proc -> proc proc .)
    VAR             reduce using rule 3 (proc -> proc proc .)
    CLOSECORCHETE   reduce using rule 3 (proc -> proc proc .)
    PROC            shift and go to state 8
    OPENCORCHETE    shift and go to state 10
    ID              shift and go to state 17

  ! PROC            [ reduce using rule 3 (proc -> proc proc .) ]
  ! OPENCORCHETE    [ reduce using rule 3 (proc -> proc proc .) ]
  ! ID              [ reduce using rule 3 (proc -> proc proc .) ]

    proc                           shift and go to state 15

state 16

    (2) program -> PROG variable proc GORP .

    $end            reduce using rule 2 (program -> PROG variable proc GORP .)


state 17

    (17) proc -> ID . LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM
    (18) proc -> ID . LPARENT NUMBER COMMA NUMBER RPARENT

    LPARENT         shift and go to state 19


state 18

    (9) proc -> PROC ID . arguments statement proc
    (14) proc -> PROC ID . LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE
    (16) proc -> PROC ID . LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE
    (10) arguments -> . LPARENT arguments RPARENT
    (11) arguments -> . arguments arguments
    (12) arguments -> . ID COMMA
    (13) arguments -> . ID

    LPARENT         shift and go to state 24
    ID              shift and go to state 22

    arguments                      shift and go to state 23

state 19

    (17) proc -> ID LPARENT . NUMBER COMMA NUMBER RPARENT SEMMICOLOM
    (18) proc -> ID LPARENT . NUMBER COMMA NUMBER RPARENT

    NUMBER          shift and go to state 25


state 20

    (15) proc -> OPENCORCHETE proc . variable proc CLOSECORCHETE
    (3) proc -> proc . proc
    (4) variable -> . VAR variable
    (5) variable -> . ID COMMA
    (6) variable -> . ID SEMMICOLOM
    (7) variable -> . variable variable
    (8) variable -> . ID ASSIGN NUMBER SEMMICOLOM
    (3) proc -> . proc proc
    (9) proc -> . PROC ID arguments statement proc
    (14) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE
    (15) proc -> . OPENCORCHETE proc variable proc CLOSECORCHETE
    (16) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE
    (17) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM
    (18) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT

    VAR             shift and go to state 4
    ID              shift and go to state 27
    PROC            shift and go to state 8
    OPENCORCHETE    shift and go to state 10

    proc                           shift and go to state 15
    variable                       shift and go to state 26

state 21

    (8) variable -> ID ASSIGN NUMBER . SEMMICOLOM

    SEMMICOLOM      shift and go to state 28


state 22

    (12) arguments -> ID . COMMA
    (13) arguments -> ID .

    COMMA           shift and go to state 29
    OPENCORCHETE    reduce using rule 13 (arguments -> ID .)
    ID              reduce using rule 13 (arguments -> ID .)
    LPARENT         reduce using rule 13 (arguments -> ID .)
    WHILE           reduce using rule 13 (arguments -> ID .)
    RPARENT         reduce using rule 13 (arguments -> ID .)


state 23

    (9) proc -> PROC ID arguments . statement proc
    (11) arguments -> arguments . arguments
    (19) statement -> . while
    (24) statement -> . OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE
    (25) statement -> . ID LPARENT ID COMMA NUMBER RPARENT
    (10) arguments -> . LPARENT arguments RPARENT
    (11) arguments -> . arguments arguments
    (12) arguments -> . ID COMMA
    (13) arguments -> . ID
    (21) while -> . WHILE LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT DO do OD

    OPENCORCHETE    shift and go to state 34
    ID              shift and go to state 30
    LPARENT         shift and go to state 35
    WHILE           shift and go to state 36

    arguments                      shift and go to state 31
    statement                      shift and go to state 32
    while                          shift and go to state 33

state 24

    (14) proc -> PROC ID LPARENT . RPARENT OPENCORCHETE statement CLOSECORCHETE
    (16) proc -> PROC ID LPARENT . RPARENT OPENCORCHETE if CLOSECORCHETE
    (10) arguments -> LPARENT . arguments RPARENT
    (10) arguments -> . LPARENT arguments RPARENT
    (11) arguments -> . arguments arguments
    (12) arguments -> . ID COMMA
    (13) arguments -> . ID

    RPARENT         shift and go to state 37
    LPARENT         shift and go to state 35
    ID              shift and go to state 22

    arguments                      shift and go to state 38

state 25

    (17) proc -> ID LPARENT NUMBER . COMMA NUMBER RPARENT SEMMICOLOM
    (18) proc -> ID LPARENT NUMBER . COMMA NUMBER RPARENT

    COMMA           shift and go to state 39


state 26

    (15) proc -> OPENCORCHETE proc variable . proc CLOSECORCHETE
    (7) variable -> variable . variable
    (3) proc -> . proc proc
    (9) proc -> . PROC ID arguments statement proc
    (14) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE
    (15) proc -> . OPENCORCHETE proc variable proc CLOSECORCHETE
    (16) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE
    (17) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM
    (18) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT
    (4) variable -> . VAR variable
    (5) variable -> . ID COMMA
    (6) variable -> . ID SEMMICOLOM
    (7) variable -> . variable variable
    (8) variable -> . ID ASSIGN NUMBER SEMMICOLOM

    PROC            shift and go to state 8
    OPENCORCHETE    shift and go to state 10
    ID              shift and go to state 9
    VAR             shift and go to state 4

    proc                           shift and go to state 40
    variable                       shift and go to state 6

state 27

    (5) variable -> ID . COMMA
    (6) variable -> ID . SEMMICOLOM
    (8) variable -> ID . ASSIGN NUMBER SEMMICOLOM
    (17) proc -> ID . LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM
    (18) proc -> ID . LPARENT NUMBER COMMA NUMBER RPARENT

    COMMA           shift and go to state 12
    SEMMICOLOM      shift and go to state 13
    ASSIGN          shift and go to state 14
    LPARENT         shift and go to state 19


state 28

    (8) variable -> ID ASSIGN NUMBER SEMMICOLOM .

    PROC            reduce using rule 8 (variable -> ID ASSIGN NUMBER SEMMICOLOM .)
    OPENCORCHETE    reduce using rule 8 (variable -> ID ASSIGN NUMBER SEMMICOLOM .)
    ID              reduce using rule 8 (variable -> ID ASSIGN NUMBER SEMMICOLOM .)
    VAR             reduce using rule 8 (variable -> ID ASSIGN NUMBER SEMMICOLOM .)


state 29

    (12) arguments -> ID COMMA .

    OPENCORCHETE    reduce using rule 12 (arguments -> ID COMMA .)
    ID              reduce using rule 12 (arguments -> ID COMMA .)
    LPARENT         reduce using rule 12 (arguments -> ID COMMA .)
    WHILE           reduce using rule 12 (arguments -> ID COMMA .)
    RPARENT         reduce using rule 12 (arguments -> ID COMMA .)


state 30

    (25) statement -> ID . LPARENT ID COMMA NUMBER RPARENT
    (12) arguments -> ID . COMMA
    (13) arguments -> ID .

  ! shift/reduce conflict for LPARENT resolved as shift
    LPARENT         shift and go to state 41
    COMMA           shift and go to state 29
    ID              reduce using rule 13 (arguments -> ID .)
    OPENCORCHETE    reduce using rule 13 (arguments -> ID .)
    WHILE           reduce using rule 13 (arguments -> ID .)

  ! LPARENT         [ reduce using rule 13 (arguments -> ID .) ]


state 31

    (11) arguments -> arguments arguments .
    (11) arguments -> arguments . arguments
    (10) arguments -> . LPARENT arguments RPARENT
    (11) arguments -> . arguments arguments
    (12) arguments -> . ID COMMA
    (13) arguments -> . ID

  ! shift/reduce conflict for LPARENT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    OPENCORCHETE    reduce using rule 11 (arguments -> arguments arguments .)
    WHILE           reduce using rule 11 (arguments -> arguments arguments .)
    RPARENT         reduce using rule 11 (arguments -> arguments arguments .)
    LPARENT         shift and go to state 35
    ID              shift and go to state 22

  ! ID              [ reduce using rule 11 (arguments -> arguments arguments .) ]
  ! LPARENT         [ reduce using rule 11 (arguments -> arguments arguments .) ]

    arguments                      shift and go to state 31

state 32

    (9) proc -> PROC ID arguments statement . proc
    (3) proc -> . proc proc
    (9) proc -> . PROC ID arguments statement proc
    (14) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE
    (15) proc -> . OPENCORCHETE proc variable proc CLOSECORCHETE
    (16) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE
    (17) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM
    (18) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT

    PROC            shift and go to state 8
    OPENCORCHETE    shift and go to state 10
    ID              shift and go to state 17

    proc                           shift and go to state 42

state 33

    (19) statement -> while .

    PROC            reduce using rule 19 (statement -> while .)
    OPENCORCHETE    reduce using rule 19 (statement -> while .)
    ID              reduce using rule 19 (statement -> while .)
    CLOSECORCHETE   reduce using rule 19 (statement -> while .)


state 34

    (24) statement -> OPENCORCHETE . ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE

    ID              shift and go to state 43


state 35

    (10) arguments -> LPARENT . arguments RPARENT
    (10) arguments -> . LPARENT arguments RPARENT
    (11) arguments -> . arguments arguments
    (12) arguments -> . ID COMMA
    (13) arguments -> . ID

    LPARENT         shift and go to state 35
    ID              shift and go to state 22

    arguments                      shift and go to state 38

state 36

    (21) while -> WHILE . LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT DO do OD

    LPARENT         shift and go to state 44


state 37

    (14) proc -> PROC ID LPARENT RPARENT . OPENCORCHETE statement CLOSECORCHETE
    (16) proc -> PROC ID LPARENT RPARENT . OPENCORCHETE if CLOSECORCHETE

    OPENCORCHETE    shift and go to state 45


state 38

    (10) arguments -> LPARENT arguments . RPARENT
    (11) arguments -> arguments . arguments
    (10) arguments -> . LPARENT arguments RPARENT
    (11) arguments -> . arguments arguments
    (12) arguments -> . ID COMMA
    (13) arguments -> . ID

    RPARENT         shift and go to state 46
    LPARENT         shift and go to state 35
    ID              shift and go to state 22

    arguments                      shift and go to state 31

state 39

    (17) proc -> ID LPARENT NUMBER COMMA . NUMBER RPARENT SEMMICOLOM
    (18) proc -> ID LPARENT NUMBER COMMA . NUMBER RPARENT

    NUMBER          shift and go to state 47


state 40

    (15) proc -> OPENCORCHETE proc variable proc . CLOSECORCHETE
    (3) proc -> proc . proc
    (3) proc -> . proc proc
    (9) proc -> . PROC ID arguments statement proc
    (14) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE
    (15) proc -> . OPENCORCHETE proc variable proc CLOSECORCHETE
    (16) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE
    (17) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM
    (18) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT

    CLOSECORCHETE   shift and go to state 48
    PROC            shift and go to state 8
    OPENCORCHETE    shift and go to state 10
    ID              shift and go to state 17

    proc                           shift and go to state 15

state 41

    (25) statement -> ID LPARENT . ID COMMA NUMBER RPARENT

    ID              shift and go to state 49


state 42

    (9) proc -> PROC ID arguments statement proc .
    (3) proc -> proc . proc
    (3) proc -> . proc proc
    (9) proc -> . PROC ID arguments statement proc
    (14) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE
    (15) proc -> . OPENCORCHETE proc variable proc CLOSECORCHETE
    (16) proc -> . PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE
    (17) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM
    (18) proc -> . ID LPARENT NUMBER COMMA NUMBER RPARENT

  ! shift/reduce conflict for PROC resolved as shift
  ! shift/reduce conflict for OPENCORCHETE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    GORP            reduce using rule 9 (proc -> PROC ID arguments statement proc .)
    VAR             reduce using rule 9 (proc -> PROC ID arguments statement proc .)
    CLOSECORCHETE   reduce using rule 9 (proc -> PROC ID arguments statement proc .)
    PROC            shift and go to state 8
    OPENCORCHETE    shift and go to state 10
    ID              shift and go to state 17

  ! PROC            [ reduce using rule 9 (proc -> PROC ID arguments statement proc .) ]
  ! OPENCORCHETE    [ reduce using rule 9 (proc -> PROC ID arguments statement proc .) ]
  ! ID              [ reduce using rule 9 (proc -> PROC ID arguments statement proc .) ]

    proc                           shift and go to state 15

state 43

    (24) statement -> OPENCORCHETE ID . LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE

    LPARENT         shift and go to state 50


state 44

    (21) while -> WHILE LPARENT . ID LPARENT ID COMMA NUMBER RPARENT RPARENT DO do OD

    ID              shift and go to state 51


state 45

    (14) proc -> PROC ID LPARENT RPARENT OPENCORCHETE . statement CLOSECORCHETE
    (16) proc -> PROC ID LPARENT RPARENT OPENCORCHETE . if CLOSECORCHETE
    (19) statement -> . while
    (24) statement -> . OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE
    (25) statement -> . ID LPARENT ID COMMA NUMBER RPARENT
    (20) if -> . IF condition OPENCORCHETE statement CLOSECORCHETE FI
    (21) while -> . WHILE LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT DO do OD

    OPENCORCHETE    shift and go to state 34
    ID              shift and go to state 52
    IF              shift and go to state 55
    WHILE           shift and go to state 36

    statement                      shift and go to state 53
    if                             shift and go to state 54
    while                          shift and go to state 33

state 46

    (10) arguments -> LPARENT arguments RPARENT .

    OPENCORCHETE    reduce using rule 10 (arguments -> LPARENT arguments RPARENT .)
    ID              reduce using rule 10 (arguments -> LPARENT arguments RPARENT .)
    LPARENT         reduce using rule 10 (arguments -> LPARENT arguments RPARENT .)
    WHILE           reduce using rule 10 (arguments -> LPARENT arguments RPARENT .)
    RPARENT         reduce using rule 10 (arguments -> LPARENT arguments RPARENT .)


state 47

    (17) proc -> ID LPARENT NUMBER COMMA NUMBER . RPARENT SEMMICOLOM
    (18) proc -> ID LPARENT NUMBER COMMA NUMBER . RPARENT

    RPARENT         shift and go to state 56


state 48

    (15) proc -> OPENCORCHETE proc variable proc CLOSECORCHETE .

    GORP            reduce using rule 15 (proc -> OPENCORCHETE proc variable proc CLOSECORCHETE .)
    PROC            reduce using rule 15 (proc -> OPENCORCHETE proc variable proc CLOSECORCHETE .)
    OPENCORCHETE    reduce using rule 15 (proc -> OPENCORCHETE proc variable proc CLOSECORCHETE .)
    ID              reduce using rule 15 (proc -> OPENCORCHETE proc variable proc CLOSECORCHETE .)
    VAR             reduce using rule 15 (proc -> OPENCORCHETE proc variable proc CLOSECORCHETE .)
    CLOSECORCHETE   reduce using rule 15 (proc -> OPENCORCHETE proc variable proc CLOSECORCHETE .)


state 49

    (25) statement -> ID LPARENT ID . COMMA NUMBER RPARENT

    COMMA           shift and go to state 57


state 50

    (24) statement -> OPENCORCHETE ID LPARENT . ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE

    ID              shift and go to state 58


state 51

    (21) while -> WHILE LPARENT ID . LPARENT ID COMMA NUMBER RPARENT RPARENT DO do OD

    LPARENT         shift and go to state 59


state 52

    (25) statement -> ID . LPARENT ID COMMA NUMBER RPARENT

    LPARENT         shift and go to state 41


state 53

    (14) proc -> PROC ID LPARENT RPARENT OPENCORCHETE statement . CLOSECORCHETE

    CLOSECORCHETE   shift and go to state 60


state 54

    (16) proc -> PROC ID LPARENT RPARENT OPENCORCHETE if . CLOSECORCHETE

    CLOSECORCHETE   shift and go to state 61


state 55

    (20) if -> IF . condition OPENCORCHETE statement CLOSECORCHETE FI
    (22) condition -> . LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT

    LPARENT         shift and go to state 63

    condition                      shift and go to state 62

state 56

    (17) proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT . SEMMICOLOM
    (18) proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT .

    SEMMICOLOM      shift and go to state 64
    GORP            reduce using rule 18 (proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT .)
    PROC            reduce using rule 18 (proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT .)
    OPENCORCHETE    reduce using rule 18 (proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT .)
    ID              reduce using rule 18 (proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT .)
    VAR             reduce using rule 18 (proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT .)
    CLOSECORCHETE   reduce using rule 18 (proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT .)


state 57

    (25) statement -> ID LPARENT ID COMMA . NUMBER RPARENT

    NUMBER          shift and go to state 65


state 58

    (24) statement -> OPENCORCHETE ID LPARENT ID . RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE

    RPARENT         shift and go to state 66


state 59

    (21) while -> WHILE LPARENT ID LPARENT . ID COMMA NUMBER RPARENT RPARENT DO do OD

    ID              shift and go to state 67


state 60

    (14) proc -> PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE .

    GORP            reduce using rule 14 (proc -> PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE .)
    PROC            reduce using rule 14 (proc -> PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE .)
    OPENCORCHETE    reduce using rule 14 (proc -> PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE .)
    ID              reduce using rule 14 (proc -> PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE .)
    VAR             reduce using rule 14 (proc -> PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE .)
    CLOSECORCHETE   reduce using rule 14 (proc -> PROC ID LPARENT RPARENT OPENCORCHETE statement CLOSECORCHETE .)


state 61

    (16) proc -> PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE .

    GORP            reduce using rule 16 (proc -> PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE .)
    PROC            reduce using rule 16 (proc -> PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE .)
    OPENCORCHETE    reduce using rule 16 (proc -> PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE .)
    ID              reduce using rule 16 (proc -> PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE .)
    VAR             reduce using rule 16 (proc -> PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE .)
    CLOSECORCHETE   reduce using rule 16 (proc -> PROC ID LPARENT RPARENT OPENCORCHETE if CLOSECORCHETE .)


state 62

    (20) if -> IF condition . OPENCORCHETE statement CLOSECORCHETE FI

    OPENCORCHETE    shift and go to state 68


state 63

    (22) condition -> LPARENT . ID LPARENT ID COMMA NUMBER RPARENT RPARENT

    ID              shift and go to state 69


state 64

    (17) proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM .

    GORP            reduce using rule 17 (proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM .)
    PROC            reduce using rule 17 (proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM .)
    OPENCORCHETE    reduce using rule 17 (proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM .)
    ID              reduce using rule 17 (proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM .)
    VAR             reduce using rule 17 (proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM .)
    CLOSECORCHETE   reduce using rule 17 (proc -> ID LPARENT NUMBER COMMA NUMBER RPARENT SEMMICOLOM .)


state 65

    (25) statement -> ID LPARENT ID COMMA NUMBER . RPARENT

    RPARENT         shift and go to state 70


state 66

    (24) statement -> OPENCORCHETE ID LPARENT ID RPARENT . SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE

    SEMMICOLOM      shift and go to state 71


state 67

    (21) while -> WHILE LPARENT ID LPARENT ID . COMMA NUMBER RPARENT RPARENT DO do OD

    COMMA           shift and go to state 72


state 68

    (20) if -> IF condition OPENCORCHETE . statement CLOSECORCHETE FI
    (19) statement -> . while
    (24) statement -> . OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE
    (25) statement -> . ID LPARENT ID COMMA NUMBER RPARENT
    (21) while -> . WHILE LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT DO do OD

    OPENCORCHETE    shift and go to state 34
    ID              shift and go to state 52
    WHILE           shift and go to state 36

    statement                      shift and go to state 73
    while                          shift and go to state 33

state 69

    (22) condition -> LPARENT ID . LPARENT ID COMMA NUMBER RPARENT RPARENT

    LPARENT         shift and go to state 74


state 70

    (25) statement -> ID LPARENT ID COMMA NUMBER RPARENT .

    PROC            reduce using rule 25 (statement -> ID LPARENT ID COMMA NUMBER RPARENT .)
    OPENCORCHETE    reduce using rule 25 (statement -> ID LPARENT ID COMMA NUMBER RPARENT .)
    ID              reduce using rule 25 (statement -> ID LPARENT ID COMMA NUMBER RPARENT .)
    CLOSECORCHETE   reduce using rule 25 (statement -> ID LPARENT ID COMMA NUMBER RPARENT .)


state 71

    (24) statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM . ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE

    ID              shift and go to state 75


state 72

    (21) while -> WHILE LPARENT ID LPARENT ID COMMA . NUMBER RPARENT RPARENT DO do OD

    NUMBER          shift and go to state 76


state 73

    (20) if -> IF condition OPENCORCHETE statement . CLOSECORCHETE FI

    CLOSECORCHETE   shift and go to state 77


state 74

    (22) condition -> LPARENT ID LPARENT . ID COMMA NUMBER RPARENT RPARENT

    ID              shift and go to state 78


state 75

    (24) statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID . LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE

    LPARENT         shift and go to state 79


state 76

    (21) while -> WHILE LPARENT ID LPARENT ID COMMA NUMBER . RPARENT RPARENT DO do OD

    RPARENT         shift and go to state 80


state 77

    (20) if -> IF condition OPENCORCHETE statement CLOSECORCHETE . FI

    FI              shift and go to state 81


state 78

    (22) condition -> LPARENT ID LPARENT ID . COMMA NUMBER RPARENT RPARENT

    COMMA           shift and go to state 82


state 79

    (24) statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT . ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE

    ID              shift and go to state 83


state 80

    (21) while -> WHILE LPARENT ID LPARENT ID COMMA NUMBER RPARENT . RPARENT DO do OD

    RPARENT         shift and go to state 84


state 81

    (20) if -> IF condition OPENCORCHETE statement CLOSECORCHETE FI .

    CLOSECORCHETE   reduce using rule 20 (if -> IF condition OPENCORCHETE statement CLOSECORCHETE FI .)


state 82

    (22) condition -> LPARENT ID LPARENT ID COMMA . NUMBER RPARENT RPARENT

    NUMBER          shift and go to state 85


state 83

    (24) statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID . RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE

    RPARENT         shift and go to state 86


state 84

    (21) while -> WHILE LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT . DO do OD

    DO              shift and go to state 87


state 85

    (22) condition -> LPARENT ID LPARENT ID COMMA NUMBER . RPARENT RPARENT

    RPARENT         shift and go to state 88


state 86

    (24) statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT . SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE

    SEMMICOLOM      shift and go to state 89


state 87

    (21) while -> WHILE LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT DO . do OD
    (23) do -> . OPENCORCHETE ID LPARENT ID COMMA NUMBER RPARENT CLOSECORCHETE

    OPENCORCHETE    shift and go to state 91

    do                             shift and go to state 90

state 88

    (22) condition -> LPARENT ID LPARENT ID COMMA NUMBER RPARENT . RPARENT

    RPARENT         shift and go to state 92


state 89

    (24) statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM . ID LPARENT ID RPARENT CLOSECORCHETE

    ID              shift and go to state 93


state 90

    (21) while -> WHILE LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT DO do . OD

    OD              shift and go to state 94


state 91

    (23) do -> OPENCORCHETE . ID LPARENT ID COMMA NUMBER RPARENT CLOSECORCHETE

    ID              shift and go to state 95


state 92

    (22) condition -> LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT .

    OPENCORCHETE    reduce using rule 22 (condition -> LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT .)


state 93

    (24) statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID . LPARENT ID RPARENT CLOSECORCHETE

    LPARENT         shift and go to state 96


state 94

    (21) while -> WHILE LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT DO do OD .

    PROC            reduce using rule 21 (while -> WHILE LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT DO do OD .)
    OPENCORCHETE    reduce using rule 21 (while -> WHILE LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT DO do OD .)
    ID              reduce using rule 21 (while -> WHILE LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT DO do OD .)
    CLOSECORCHETE   reduce using rule 21 (while -> WHILE LPARENT ID LPARENT ID COMMA NUMBER RPARENT RPARENT DO do OD .)


state 95

    (23) do -> OPENCORCHETE ID . LPARENT ID COMMA NUMBER RPARENT CLOSECORCHETE

    LPARENT         shift and go to state 97


state 96

    (24) statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT . ID RPARENT CLOSECORCHETE

    ID              shift and go to state 98


state 97

    (23) do -> OPENCORCHETE ID LPARENT . ID COMMA NUMBER RPARENT CLOSECORCHETE

    ID              shift and go to state 99


state 98

    (24) statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID . RPARENT CLOSECORCHETE

    RPARENT         shift and go to state 100


state 99

    (23) do -> OPENCORCHETE ID LPARENT ID . COMMA NUMBER RPARENT CLOSECORCHETE

    COMMA           shift and go to state 101


state 100

    (24) statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT . CLOSECORCHETE

    CLOSECORCHETE   shift and go to state 102


state 101

    (23) do -> OPENCORCHETE ID LPARENT ID COMMA . NUMBER RPARENT CLOSECORCHETE

    NUMBER          shift and go to state 103


state 102

    (24) statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE .

    PROC            reduce using rule 24 (statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE .)
    OPENCORCHETE    reduce using rule 24 (statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE .)
    ID              reduce using rule 24 (statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE .)
    CLOSECORCHETE   reduce using rule 24 (statement -> OPENCORCHETE ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT SEMMICOLOM ID LPARENT ID RPARENT CLOSECORCHETE .)


state 103

    (23) do -> OPENCORCHETE ID LPARENT ID COMMA NUMBER . RPARENT CLOSECORCHETE

    RPARENT         shift and go to state 104


state 104

    (23) do -> OPENCORCHETE ID LPARENT ID COMMA NUMBER RPARENT . CLOSECORCHETE

    CLOSECORCHETE   shift and go to state 105


state 105

    (23) do -> OPENCORCHETE ID LPARENT ID COMMA NUMBER RPARENT CLOSECORCHETE .

    OD              reduce using rule 23 (do -> OPENCORCHETE ID LPARENT ID COMMA NUMBER RPARENT CLOSECORCHETE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 6 resolved as shift
WARNING: shift/reduce conflict for ID in state 6 resolved as shift
WARNING: shift/reduce conflict for VAR in state 11 resolved as shift
WARNING: shift/reduce conflict for ID in state 11 resolved as shift
WARNING: shift/reduce conflict for PROC in state 15 resolved as shift
WARNING: shift/reduce conflict for OPENCORCHETE in state 15 resolved as shift
WARNING: shift/reduce conflict for ID in state 15 resolved as shift
WARNING: shift/reduce conflict for LPARENT in state 30 resolved as shift
WARNING: shift/reduce conflict for LPARENT in state 31 resolved as shift
WARNING: shift/reduce conflict for ID in state 31 resolved as shift
WARNING: shift/reduce conflict for PROC in state 42 resolved as shift
WARNING: shift/reduce conflict for OPENCORCHETE in state 42 resolved as shift
WARNING: shift/reduce conflict for ID in state 42 resolved as shift
